#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <errno.h>

#define DEFAULT_TIME 10        /*10s检测一次*/
#define MIN_WAIT_TASK_NUM 10   /*如果queue_size > MIN_WAIT_TASK_NUM 添加新的线程到线程池*/
#define DEFAULT_THREAD_VARY 10 /*每次创建和销毁线程的个数*/
#define true 1
#define false 0

#include <iostream>
using namespace std;

class ThreadPool
{
protected:
    typedef struct
    {
        void *(*function)(void *); /* 函数指针，回调函数 */
        void *arg;                 /* 上面函数的参数 */
    } threadpool_task_t;

    pthread_mutex_t lock;           /* 用于锁住本结构体 */
    pthread_mutex_t thread_counter; /* 记录忙状态线程个数de琐 -- busy_thr_num */

    pthread_cond_t queue_not_full;  /* 当任务队列满时，添加任务的线程阻塞，等待此条件变量 */
    pthread_cond_t queue_not_empty; /* 任务队列里不为空时，通知等待任务的线程 */

    pthread_t *threads;            /* 存放线程池中每个线程的tid。数组 */
    pthread_t adjust_tid;          /* 存管理线程tid */
    threadpool_task_t *task_queue; /* 任务队列(数组首地址) */

    int min_thr_num;       /* 线程池最小线程数 */
    int max_thr_num;       /* 线程池最大线程数 */
    int live_thr_num;      /* 当前存活线程个数 */
    int busy_thr_num;      /* 忙状态线程个数 */
    int wait_exit_thr_num; /* 要销毁的线程个数 */

    int queue_front;    /* task_queue队头下标 */
    int queue_rear;     /* task_queue队尾下标 */
    int queue_size;     /* task_queue队中实际任务数 */
    int queue_max_size; /* task_queue队列可容纳任务数上限 */

    int shutdown; /* 标志位，线程池使用状态，true或false */

protected:
    /**
     * @function threadpool_free
     * @desc Free thread pool resource.
     * @param pool  Thread pool to free.
     * @return 0 if destory success else -1
     */
    int threadpool_free();

    /**
     * @function threadpool_thread
     * @desc Work thread.
     * @param .
     * @return 0 if success else -1
     */
    static void *threadpool_thread(void *arg);

    /**
     * @function adjust_thread
     * @desc Manage and adjust threads number.
     * @param .
     * @return 0 if success else -1
     */
    static void *adjust_thread(void *arg);

public:
    // delegate constructor
    ThreadPool() : ThreadPool(10, 20, 30){};
    ThreadPool(int min_thr_num, int max_thr_num, int queue_max_size);

    /**
     * @desc Stops and destroys a thread pool.
     * @param pool  Thread pool to destroy.
     * @return 0 if destory success else -1
     */
    ~ThreadPool();

    /**
     * @function threadpool_add
     * @desc add a new task in the queue of a thread pool
     * @param pool     Thread pool to which add the task.
     * @param function Pointer to the function that will perform the task.
     * @param argument Argument to be passed to the function.
     * @return 0 if all goes well,else -1
     */
    int threadpool_add(void *(*function)(void *), void *arg);

    /**
     * @desc get the thread num
     * @pool pool threadpool
     * @return # of the thread
     */
    int threadpool_all_threadnum();

    /**
     * desc get the busy thread num
     * @param pool threadpool
     * return # of the busy thread
     */
    int threadpool_busy_threadnum();

    /**
     * @function is_thread_alive
     * @desc Check thread is alive or not.
     * @param tid pthread id.
     * @return 0 if success else -1
     */
    int is_thread_alive(pthread_t tid);
};

ThreadPool::ThreadPool(int min_thr_num, int max_thr_num, int queue_max_size)
{
    do
    {
        this->min_thr_num = min_thr_num;
        this->max_thr_num = max_thr_num;
        this->busy_thr_num = 0;
        this->live_thr_num = min_thr_num; /* 活着的线程数 初值=最小线程数 */
        this->wait_exit_thr_num = 0;
        this->queue_size = 0; /* 有0个产品 */
        this->queue_max_size = queue_max_size;
        this->queue_front = 0;
        this->queue_rear = 0;
        this->shutdown = false; /* 不关闭线程池 */

        /* 根据最大线程上限数， 给工作线程数组开辟空间, 并清零 */
        this->threads = (pthread_t *)malloc(sizeof(pthread_t) * max_thr_num);
        if (this->threads == NULL)
        {
            printf("malloc threads fail");
            threadpool_free(); 
            break;
        }
        memset(this->threads, 0, sizeof(pthread_t) * max_thr_num);

        /* 队列开辟空间 */
        this->task_queue = (threadpool_task_t *)malloc(sizeof(threadpool_task_t) * queue_max_size);
        if (this->task_queue == NULL)
        {
            printf("malloc task_queue fail");
            threadpool_free(); 
            break;
        }

        /* 初始化互斥琐、条件变量 */
        if (pthread_mutex_init(&(this->lock), NULL) != 0 ||
            pthread_mutex_init(&(this->thread_counter), NULL) != 0 ||
            pthread_cond_init(&(this->queue_not_empty), NULL) != 0 ||
            pthread_cond_init(&(this->queue_not_full), NULL) != 0)
        {
            printf("init the lock or cond fail");
            threadpool_free(); 
            break;
        }


        /* 启动 min_thr_num 个 work thread */
        for (int i = 0; i < min_thr_num; i++)
        {
            pthread_create(&(this->threads[i]), NULL, threadpool_thread, (void *)this); /*pool指向当前线程池*/
        }
        pthread_create(&(this->adjust_tid), NULL, adjust_thread, (void *)this); /* 启动管理者线程 */
        
    } while (0);

    
}

ThreadPool::~ThreadPool()
{
    this->shutdown = true;

    /*先销毁管理线程*/
    pthread_join(this->adjust_tid, NULL);

    for (int i = 0; i < this->live_thr_num; i++)
    {
        /*通知所有的空闲线程*/
        pthread_cond_broadcast(&(this->queue_not_empty));
    }
    for (int i = 0; i < this->live_thr_num; i++)
    {
        pthread_join(this->threads[i], NULL);
    }

    threadpool_free();
}

int ThreadPool::threadpool_free()
{

    if (this->task_queue)
    {
        free(this->task_queue);
    }

    if (this->threads)
    {
        free(this->threads);
        pthread_mutex_lock(&(this->lock));
        pthread_mutex_destroy(&(this->lock));
        pthread_mutex_lock(&(this->thread_counter));
        pthread_mutex_destroy(&(this->thread_counter));
        pthread_cond_destroy(&(this->queue_not_empty));
        pthread_cond_destroy(&(this->queue_not_full));
    }

    return 0;
}

int ThreadPool::is_thread_alive(pthread_t tid)
{
    int kill_rc = pthread_kill(tid, 0); //发0号信号，测试线程是否存活
    if (kill_rc == ESRCH)
    {
        return false;
    }

    return true;
}

int ThreadPool::threadpool_all_threadnum()
{
    int all_threadnum = -1;
    pthread_mutex_lock(&(this->lock));
    all_threadnum = this->live_thr_num;
    pthread_mutex_unlock(&(this->lock));
    return all_threadnum;
}

int ThreadPool::threadpool_busy_threadnum()
{
    int busy_threadnum = -1;
    pthread_mutex_lock(&(this->thread_counter));
    busy_threadnum = this->busy_thr_num;
    pthread_mutex_unlock(&(this->thread_counter));
    return busy_threadnum;
}

void *ThreadPool::threadpool_thread(void *arg)
{
    ThreadPool *pool = (ThreadPool *)arg;
    threadpool_task_t task;

    while (true)
    {
        /* Lock must be taken to wait on conditional variable */
        /*刚创建出线程，等待任务队列里有任务，否则阻塞等待任务队列里有任务后再唤醒接收任务*/
        pthread_mutex_lock(&(pool->lock));

        /*queue_size == 0 说明没有任务，调 wait 阻塞在条件变量上, 若有任务，跳过该while*/
        while ((pool->queue_size == 0) && (!pool->shutdown))
        {
            pthread_cond_wait(&(pool->queue_not_empty), &(pool->lock));

            /*清除指定数目的空闲线程，如果要结束的线程个数大于0，结束线程*/
            if (pool->wait_exit_thr_num > 0)
            {
                pool->wait_exit_thr_num--;

                /*如果线程池里线程个数大于最小值时可以结束当前线程*/
                if (pool->live_thr_num > pool->min_thr_num)
                {
                    pool->live_thr_num--;
                    pthread_mutex_unlock(&(pool->lock));

                    pthread_exit(NULL);
                }
            }
        }

        /*如果指定了true，要关闭线程池里的每个线程，自行退出处理---销毁线程池*/
        if (pool->shutdown)
        {
            pthread_mutex_unlock(&(pool->lock));
            pthread_detach(pthread_self());
            pthread_exit(NULL); /* 线程自行结束 */
        }

        /*从任务队列里获取任务, 是一个出队操作*/
        task.function = pool->task_queue[pool->queue_front].function;
        task.arg = pool->task_queue[pool->queue_front].arg;

        pool->queue_front = (pool->queue_front + 1) % pool->queue_max_size; /* 出队，模拟环形队列 */
        pool->queue_size--;

        /*通知可以有新的任务添加进来*/
        pthread_cond_broadcast(&(pool->queue_not_full));

        /*任务取出后，立即将 线程池琐 释放*/
        pthread_mutex_unlock(&(pool->lock));

        /*执行任务*/
        pthread_mutex_lock(&(pool->thread_counter)); /*忙状态线程数变量琐*/
        pool->busy_thr_num++;                        /*忙状态线程数+1*/
        pthread_mutex_unlock(&(pool->thread_counter));

        (*(task.function))(task.arg); /*执行回调函数任务*/
        //task.function(task.arg);                                              /*执行回调函数任务*/

        /*任务结束处理*/
        pthread_mutex_lock(&(pool->thread_counter));
        pool->busy_thr_num--; /*处理掉一个任务，忙状态数线程数-1*/
        pthread_mutex_unlock(&(pool->thread_counter));
    }

    pthread_exit(NULL);
}

void *ThreadPool::adjust_thread(void *arg)
{
    ThreadPool *pool = (ThreadPool *)arg;
    while (!pool->shutdown)
    {

        sleep(DEFAULT_TIME); /*定时 对线程池管理*/

        pthread_mutex_lock(&(pool->lock));
        int queue_size = pool->queue_size;     /* 关注 任务数 */
        int live_thr_num = pool->live_thr_num; /* 存活 线程数 */
        pthread_mutex_unlock(&(pool->lock));

        pthread_mutex_lock(&(pool->thread_counter));
        int busy_thr_num = pool->busy_thr_num; /* 忙着的线程数 */
        pthread_mutex_unlock(&(pool->thread_counter));

        /* 创建新线程 算法： 任务数大于最小线程池个数, 且存活的线程数少于最大线程个数时 如：30>=10 && 40<100*/
        if (queue_size >= MIN_WAIT_TASK_NUM && live_thr_num < pool->max_thr_num)
        {
            pthread_mutex_lock(&(pool->lock));
            int add = 0;

            /*一次增加 DEFAULT_THREAD 个线程*/
            for (int i = 0; i < pool->max_thr_num && add < DEFAULT_THREAD_VARY && pool->live_thr_num < pool->max_thr_num; i++)
            {
                // if (pool->threads[i] == 0 || !is_thread_alive(pool->threads[i]))
                if (pool->threads[i] == 0 || !pool->is_thread_alive(pool->threads[i]))
                {
                    pthread_create(&(pool->threads[i]), NULL, threadpool_thread, (void *)pool);
                    add++;
                    pool->live_thr_num++;
                }
            }

            pthread_mutex_unlock(&(pool->lock));
        }

        /* 销毁多余的空闲线程 算法：忙线程X2 小于 存活的线程数 且 存活的线程数 大于 最小线程数时*/
        if ((busy_thr_num * 2) < live_thr_num && live_thr_num > pool->min_thr_num)
        {

            /* 一次销毁DEFAULT_THREAD个线程, 隨機10個即可 */
            pthread_mutex_lock(&(pool->lock));
            pool->wait_exit_thr_num = DEFAULT_THREAD_VARY; /* 要销毁的线程数 设置为10 */
            pthread_mutex_unlock(&(pool->lock));

            for (int i = 0; i < DEFAULT_THREAD_VARY; i++)
            {
                /* 通知处在空闲状态的线程, 他们会自行终止*/
                pthread_cond_signal(&(pool->queue_not_empty));
            }
        }
    }

    return NULL;
}

int ThreadPool::threadpool_add(void *(*function)(void *), void *arg)
{

    pthread_mutex_lock(&(this->lock));

    /* ==为真，队列已经满， 调wait阻塞 */
    while ((this->queue_size == this->queue_max_size) && (!this->shutdown))
    {
        puts("queue full");
        pthread_cond_wait(&(this->queue_not_full), &(this->lock));
    }
    if (this->shutdown)
    {
        pthread_cond_broadcast(&(this->queue_not_empty));
        pthread_mutex_unlock(&(this->lock));
        return 0;
    }

    /* 清空 工作线程 调用的回调函数 的参数arg */
    if (this->task_queue[this->queue_rear].arg != NULL)
    {
        this->task_queue[this->queue_rear].arg = NULL;
    }
    /*添加任务到任务队列里*/
    this->task_queue[this->queue_rear].function = function;
    this->task_queue[this->queue_rear].arg = arg;
    this->queue_rear = (this->queue_rear + 1) % this->queue_max_size; /* 队尾指针移动, 模拟环形 */
    this->queue_size++;

    /*添加完任务后，队列不为空，唤醒线程池中 等待处理任务的线程*/
    pthread_cond_signal(&(this->queue_not_empty));
    pthread_mutex_unlock(&(this->lock));

    return 0;
}
